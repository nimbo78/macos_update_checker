import logging
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database import Database
from scraper import MacOSScraper
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = '/app/data' if os.path.exists('/app/data') else '.'
log_path = os.path.join(log_dir, 'bot.log')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(log_path, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class MacOSUpdateBot:
    def __init__(self):
        self.db = Database()
        self.scraper = MacOSScraper(config.MACOS_URL)
        self.app = Application.builder().token(config.BOT_TOKEN).build()
        self.scheduler = AsyncIOScheduler()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("latest", self.latest_command))
        self.app.add_handler(CommandHandler("check", self.check_command))
        self.app.add_handler(CommandHandler("myid", self.myid_command))

    def is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in config.ALLOWED_USER_IDS

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in config.ADMIN_USER_IDS

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        if not self.is_authorized(user_id):
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                f"–í–∞—à ID: `{user_id}`\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        welcome_message = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π macOS Sequoia.\n\n"
            "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
            "/status - –°—Ç–∞—Ç—É—Å –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
            "/latest - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑\n"
            "/myid - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID\n"
        )
        
        if self.is_admin(user_id):
            welcome_message += "/check - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∞–¥–º–∏–Ω)\n"

        welcome_message += (
            "\nüîî –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ "
            f"{config.CHECK_INTERVAL // 3600} —á–∞—Å(–∞) –∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö."
        )

        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if not self.is_authorized(update.effective_user.id):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        help_text = (
            "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
            "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "/latest - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ\n"
            "/myid - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID\n"
        )
        
        if self.is_admin(update.effective_user.id):
            help_text += "/check - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"

        help_text += (
            "\nüìã *–û –±–æ—Ç–µ:*\n"
            f"–ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {config.CHECK_INTERVAL // 3600} —á–∞—Å(–∞).\n"
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤."
        )

        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        if not self.is_authorized(update.effective_user.id):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        last_check = self.db.get_last_check()
        total_releases = self.db.count_releases()
        
        if last_check:
            check_time = datetime.fromisoformat(last_check['check_time'])
            status_text = (
                "üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n\n"
                f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {check_time.strftime('%d.%m.%Y %H:%M:%S')}\n"
                f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤: {last_check['releases_found']}\n"
                f"üÜï –ù–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤: {last_check['new_releases']}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {last_check['status']}\n"
                f"üíæ –í—Å–µ–≥–æ –≤ –ë–î: {total_releases}\n\n"
                f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {config.CHECK_INTERVAL // 3600} —á–∞—Å(–∞)"
            )
        else:
            status_text = (
                "üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n\n"
                "–ü—Ä–æ–≤–µ—Ä–æ–∫ –µ—â–µ –Ω–µ –±—ã–ª–æ.\n"
                f"üíæ –í—Å–µ–≥–æ –≤ –ë–î: {total_releases}\n"
                f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {config.CHECK_INTERVAL // 3600} —á–∞—Å(–∞)"
            )

        await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)

    async def latest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /latest"""
        if not self.is_authorized(update.effective_user.id):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        latest_public = self.db.get_latest_release('public')
        latest_beta = self.db.get_latest_release('beta')

        response = "üì¶ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã macOS Sequoia*\n\n"

        if latest_public:
            response += (
                f"üü¢ *Public Release*\n"
                f"üì¶ –í–µ—Ä—Å–∏—è: {latest_public['version']}\n"
                f"üî® Build: {latest_public['build']}\n"
                f"üìÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω: {datetime.fromisoformat(latest_public['date_discovered']).strftime('%d.%m.%Y %H:%M')}\n"
                f"‚¨áÔ∏è [–°–∫–∞—á–∞—Ç—å]({latest_public['download_url']})\n\n"
            )
        else:
            response += "üü¢ *Public Release*\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

        if latest_beta:
            response += (
                f"üü° *Beta Release*\n"
                f"üì¶ –í–µ—Ä—Å–∏—è: {latest_beta['version']}\n"
                f"üî® Build: {latest_beta['build']}\n"
                f"üìÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω: {datetime.fromisoformat(latest_beta['date_discovered']).strftime('%d.%m.%Y %H:%M')}\n"
                f"‚¨áÔ∏è [–°–∫–∞—á–∞—Ç—å]({latest_beta['download_url']})\n"
            )
        else:
            response += "üü° *Beta Release*\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        await update.message.reply_text(
            response, 
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )

    async def check_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /check - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.is_authorized(user_id):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        if not self.is_admin(user_id):
            await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await self.check_for_updates()
        
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

    async def myid_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /myid"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        first_name = update.effective_user.first_name or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        await update.message.reply_text(
            f"üë§ *–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
            f"üÜî ID: `{user_id}`\n"
            f"üë§ –ò–º—è: {first_name}\n"
            f"üìù Username: @{username}\n\n"
            f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode=ParseMode.MARKDOWN
        )

    async def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫
        is_first_run = self.db.count_releases() == 0
        
        result = self.scraper.scrape()
        
        if not result['success']:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {result['error']}")
            self.db.add_check_history(0, 0, f"–û—à–∏–±–∫–∞: {result['error']}")
            return

        releases = result['releases']
        new_releases = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–ª–∏–∑
        for release in releases:
            added = self.db.add_release(
                release['version'],
                release['build'],
                release['release_type'],
                release['date_published'],
                release['download_url']
            )
            
            if added:
                new_releases.append(release)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.db.add_check_history(
            len(releases),
            len(new_releases),
            "–£—Å–ø–µ—à–Ω–æ"
        )

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤: {len(releases)}, –Ω–æ–≤—ã—Ö: {len(new_releases)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö
        if new_releases:
            if is_first_run:
                # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–∫—É
                logger.info(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(new_releases)} —Ä–µ–ª–∏–∑–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–∫—É")
                await self.send_first_run_summary(new_releases)
            else:
                # –ü—Ä–∏ –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Ä–µ–ª–∏–∑–µ
                await self.send_notifications(new_releases)

    async def send_first_run_summary(self, releases: list):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (–≤–º–µ—Å—Ç–æ —Å–ø–∞–º–∞ –≤—Å–µ–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏)"""
        public_releases = [r for r in releases if r['release_type'] == 'public']
        beta_releases = [r for r in releases if r['release_type'] == 'beta']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏
        latest_public = self.db.get_latest_release('public')
        latest_beta = self.db.get_latest_release('beta')
        
        message = (
            "üéâ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!*\n\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n"
            f"üü¢ Public —Ä–µ–ª–∏–∑–æ–≤: {len(public_releases)}\n"
            f"üü° Beta —Ä–µ–ª–∏–∑–æ–≤: {len(beta_releases)}\n\n"
            "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏:*\n\n"
        )
        
        if latest_public:
            message += (
                f"üü¢ *Public:* {latest_public['version']} (Build {latest_public['build']})\n"
                f"‚¨áÔ∏è [–°–∫–∞—á–∞—Ç—å]({latest_public['download_url']})\n\n"
            )
        
        if latest_beta:
            message += (
                f"üü° *Beta:* {latest_beta['version']} (Build {latest_beta['build']})\n"
                f"‚¨áÔ∏è [–°–∫–∞—á–∞—Ç—å]({latest_beta['download_url']})\n\n"
            )
        
        message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /latest –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–ª–∏–∑–æ–≤."
        
        for chat_id in config.NOTIFICATION_TARGETS:
            try:
                await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
                logger.info(f"–°–≤–æ–¥–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")

    async def send_notifications(self, releases: list):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö"""
        for release in releases:
            message = self.format_release_message(release)
            
            for chat_id in config.NOTIFICATION_TARGETS:
                try:
                    await self.app.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN,
                        disable_web_page_preview=True
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π
                    self.db.mark_as_notified(
                        release['version'],
                        release['build'],
                        release['release_type']
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")

    def format_release_message(self, release: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–µ"""
        emoji = "üü¢" if release['release_type'] == 'public' else "üü°"
        type_name = "Public Release" if release['release_type'] == 'public' else "Beta Release"
        
        message = (
            f"{emoji} *–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ macOS Sequoia!*\n\n"
            f"üì¶ –í–µ—Ä—Å–∏—è: `{release['version']}`\n"
            f"üî® Build: `{release['build']}`\n"
            f"üè∑Ô∏è –¢–∏–ø: {type_name}\n"
        )
        
        if release['date_published']:
            message += f"üìÖ –î–∞—Ç–∞: {release['date_published']}\n"
        
        if release['download_url']:
            message += f"\n‚¨áÔ∏è [–°–∫–∞—á–∞—Ç—å InstallAssistant.pkg]({release['download_url']})\n"
        
        message += "\nüíæ –†–∞–∑–º–µ—Ä: ~13 GB"
        
        return message

    async def scheduled_check(self):
        """–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)"""
        await self.check_for_updates()

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler.add_job(
            self.scheduled_check,
            'interval',
            seconds=config.CHECK_INTERVAL,
            id='check_updates'
        )
        self.scheduler.start()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {config.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {config.ALLOWED_USER_IDS}")
        logger.info(f"–¶–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {config.NOTIFICATION_TARGETS}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    bot = MacOSUpdateBot()
    bot.start()
